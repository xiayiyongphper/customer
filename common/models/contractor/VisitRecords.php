<?php
namespace common\models\contractor;

use common\models\LeCustomers;
use common\models\LeCustomersIntention;
use framework\components\ToolsAbstract;
use Yii;
use framework\db\ActiveRecord;

/**
 * Created by PhpStorm.
 * User: henryzhu
 * Date: 16-7-22
 * Time: 上午11:24
 */

/**
 * Class VisitRecords
 * @package common\models\contractor
 * @property integer $contractor_id
 * @property string $contractor_name
 * @property integer $customer_id
 * @property string $store_name
 * @property string $visit_purpose
 * @property string $visit_way
 * @property string $visit_content
 * @property string $feedback
 * @property string $created_at
 * @property string $visited_at
 * @property integer $is_intended
 * @property string $lat
 * @property string $lng
 * @property string $locate_address
 * @property string $gallery
 */
class VisitRecords extends ActiveRecord
{
    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('mainDb');
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'contractor_visit_records';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['contractor_id', 'customer_id', 'created_at'], 'required'],
        ];
    }

    public function isEditable()
    {
        return ToolsAbstract::dateSub(null, $this->created_at) >= 24 * 3600 ? false : true;
    }

    public function getStoreFrontImage()
    {
        if ($this->is_intended > 0) {
            $customer = LeCustomersIntention::find()->where(['entity_id' => $this->customer_id])->addSelect(['store_front_img'])->asArray()->one();
            $image = $customer['store_front_img'];
        } else {
            $customer = LeCustomers::find()->where(['entity_id' => $this->customer_id])->addSelect(['store_front_img'])->asArray()->one();
            $image = $customer['store_front_img'];
        }
        return $image;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($insert && $this->is_intended == 0 && $this->customer_id > 0) {
            //new record,need to update customer's last visited time
            /** @var LeCustomers $customer */
            $customer = LeCustomers::findOne(['entity_id' => $this->customer_id]);
            if($customer){
                $customer->last_visited_at = $this->visited_at;
                $customer->save();
            }
        }
    }
}